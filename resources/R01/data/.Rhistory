# Dimmension of the table: # of rows and # of columns
dim(Hitters)
# Hoe many NA values are there
sum(is.na(Hitters$Salary))
# Overwrite Hitters object by a new that has no NA values, i.e. remove NAs
Hitters=na.omit(Hitters)
dim(Hitters)
sum(is.na(Hitters))
# Upload package/library leaps that contains best subest selection
# function regsubsets
library(leaps)
# perform bexhaustive best subset selection procedure, default up to
# 8 best variable models
regfit.full=regsubsets(Salary~.,Hitters)
# Summary of the fit will tell(asterisk) you which variables are included
summary(regfit.full)
# Build up 19 (nvmax=19) best variable models
regfit.full=regsubsets(Salary~.,data=Hitters,nvmax=19)
reg.summary=summary(regfit.full)
# what components does summary function produce for a regsubsets object
names(reg.summary)
#Display r^2 for all best 1 -19 variable models
reg.summary$rsq
# tell R that you want to create 4 graphs on one sheet
par(mfrow=c(2,2))
# Plot RSS (residual sum of squares, i.e. error)
plot(reg.summary$rss,xlab="Number of Variables",ylab="RSS",type="l")
# Plot adjusted r^2
plot(reg.summary$adjr2,xlab="Number of Variables",ylab="Adjusted RSq",type="l")
# Determine which model corresponds to largest adjusted r^2
best.adjr2=which.max(reg.summary$adjr2)
# Make the largest value of adjusted r^2 red
points(best.adjr2,reg.summary$adjr2[best.adjr2], col="red",cex=2,pch=20)
# Plot Cp
plot(reg.summary$cp,xlab="Number of Variables",ylab="Cp",type='l')
# Determine which model corresponds to smallest Cp
best.cp=which.min(reg.summary$cp)
# Make smallest value of Cp red
points(best.adjr2,reg.summary$cp[best.adjr2],col="red",cex=2,pch=20)
# Plot BICs
plot(reg.summary$bic,xlab="Number of Variables",ylab="BIC",type='l')
# Determine which model corresponds to smallest BIC
best.bic=which.min(reg.summary$bic)
# Make smallest value of BIC red
points(best.bic,reg.summary$bic[best.bic],col="red",cex=2,pch=20)
# Next function plots a table of models showing which variables are
# in each model. The models are ordered by the specified model selection
# statistic. This plot is particularly useful when there are more than
# ten or so models and the simple table produced by summary.regsubsets
# is too big to read.
plot(regfit.full,scale="r2")
plot(regfit.full,scale="adjr2")
plot(regfit.full,scale="Cp")
plot(regfit.full,scale="bic")
coef(regfit.full,6)
par(mfrow=c(1,1))
plot(regfit.full,scale="bic")
# Forward and Backward Stepwise Selection
regfit.fwd=regsubsets(Salary~.,data=Hitters,nvmax=19,method="forward")
summary(regfit.fwd)
regfit.bwd=regsubsets(Salary~.,data=Hitters,nvmax=19,method="backward")
summary(regfit.bwd)
coef(regfit.full,7)
coef(regfit.fwd,7)
coef(regfit.bwd,7)
# Choosing Among Models
set.seed(1)
train=sample(c(TRUE,FALSE), nrow(Hitters),rep=TRUE)
test=(!train)
regfit.best=regsubsets(Salary~.,data=Hitters[train,],nvmax=19)
# Linear models and generalized linear models incorporate a model
# matrix, often written as X.This matrix is sometimes called a design matrix.
# When we use an R function such as lm or aov or glm to fit a linear or a
# generalized linear model, the model matrix is created from the formula
# and data arguments automatically.
# Function model.matrix creates a design (or model) matrix, e.g., by expanding
# factors to a set of dummy variables (depending on the contrasts) and
# expanding interactions similarly.
# Run examples (4 commented lines of code)
# group <- c(1,1,2,2)
# model.matrix(~ group)
# group <- factor( c(1,1,2,2) )
# model.matrix(~ group)
# Make a model matrix from test  set ( we do that because predict function does
# not work for regsubsets output and we need to calculate prediction manually)
test.mat=model.matrix(Salary~.,data=Hitters[test,])
head(test.mat)
val.errors=rep(NA,19)
for(i in 1:19){
coefi=coef(regfit.best,id=i)
pred=test.mat[,names(coefi)]%*%coefi
val.errors[i]=mean((Hitters$Salary[test]-pred)^2)
}
val.errors
best.value=which.min(val.errors)
best.value
coef(regfit.best,best.value)
# Create a function that does calculates predicted values for regsubsets object
# Remember predict function does not work for regsubsets object
predict.regsubsets=function(object,newdata,id,...){
form=as.formula(object$call[[2]])
mat=model.matrix(form,newdata)
coefi=coef(object,id=id)
xvars=names(coefi)
mat[,xvars]%*%coefi
# refers to matrics multiplication: row of mat * column of coefi
}
# Perform best subset selection on the full data set, and select the best 10 variable model
# The larger the data set the more accuarate the coefficient estimates for regression model are
# Best ten-variable model on the full data set may differ from the corresponding
# model on the training set!
regfit.best=regsubsets(Salary~.,data=Hitters,nvmax=19)
coef(regfit.best,10)
#################################################################################
##############   K fold cross validation
#################################################################################
# We now try to choose among the models of different sizes using crossvalidation
# This approach is somewhat involved, as we must perform best
# subset selection within each of the k training sets.
k=10
set.seed(1)
# create a vector that allocates each observation to one of k = 10 folds
folds=sample(1:k,nrow(Hitters),replace=TRUE)
# create a matrix in which we will store the results
cv.errors=matrix(NA,k,19, dimnames=list(NULL, paste(1:19)))
# loop that performs cross-validation:
for(j in 1:k){
# In the jth fold, the elements of folds that equal j are in the test set, and
# the remainder are in the training set.
best.fit=regsubsets(Salary~.,data=Hitters[folds!=j,],nvmax=19)
for(i in 1:19){
# We make our predictions for each model size (using our
# new predict.regsubsets() method).
# Notye that instead of predict.regsubsets() we can write predict()
pred=predict.regsubsets(best.fit,Hitters[folds==j,],id=i)
# Compute the test errors on the appropriate subset,
# and store them in the appropriate slot in the matrix cv.errors
cv.errors[j,i]=mean( (Hitters$Salary[folds==j]-pred)^2)
}
}
# Use the apply() function to average over the columns of cv.errors
# matrix in order to obtain a vector for which the jth element is the crossvalidation
# error for the j-variable model
mean.cv.errors=apply(cv.errors,2,mean)
mean.cv.errors
par(mfrow=c(1,1))
plot(mean.cv.errors,type='b')
reg.best=regsubsets(Salary~.,data=Hitters, nvmax=19)
coef(reg.best,11)
# Chapter 6 Lab 2: Ridge Regression and the Lasso
x=model.matrix(Salary~.,Hitters)[,-1]
y=Hitters$Salary
library(glmnet)
seq(10,-2,length=100)
library(ISLR)
## needed to run ridge and lasso function
library(glmnet)
Hitters = na.omit(Hitters)
x = model.matrix(Salary~., Hitters)
x = x[,-1] #get rid of the intercept col
install.packages("glmnet")
## needed to run ridge and lasso function
library(glmnet)
Hitters = na.omit(Hitters)
x = model.matrix(Salary~., Hitters)
x = x[,-1] #get rid of the intercept col
y = Hitters$Salary
# split the dataset into training and testing
set.seed(1)
train = sample(1:nrow(x), nrow(x)/2)
test = -train
training_x = x[train,]
testing_x = x[test,]
training_y = y[train]
testing_y = y[test]
lambda_grid = seq(0, 10^10, length = 100)
ridge_model = glmnet(training_x,
training_y,
alpha =0)
plot(ridge_model, xvar = "lambda")
ridge_model$lambda[50]
ridge_model$lambda[60]
## compare the coeficients for both lambdas
coef(ridge_model)[,50]
coef(ridge_model)[,60]
set.seed(1)
cv_error = cv.glmnet(training_x,
training_y,
alpha = 0)
best_lambda = cv_error$lambda.min
best_lambda
### OUR FINAL RIDGE
model_coef = predict(ridge_model,
type = "coefficients",
s= best_lambda)
predicted_y = predict(ridge_model,
s= best_lambda,
newx = testing_x)
### MSE
mean((predicted_y - testing_y)^2)
lasso_model = glmnet(training_x,
training_y,
alpha =1)
plot(lasso_model, xvar = "lambda")
set.seed(1)
cv_error = cv.glmnet(training_x,
training_y,
alpha = 1)
best_lambda = cv_error$lambda.min
best_lambda
### OUR FINAL RIDGE
model_coef = predict(lasso_model,
type = "coefficients",
s= best_lambda)
predicted_y = predict(lasso_model,
s= best_lambda,
newx = testing_x)
### MSE
mean((predicted_y - testing_y)^2)
linear_model = lm(Salary~., data = na.omit(Hitters[train,]))
predicted_y = predict(linear_model, na.omit(Hitters[test,]))
testing_y = na.omit(Hitters$Salary[test])
mean((predicted_y - testing_y)^2)
sum(is.na(mag_data))
#create a new dummy variable to describe Market variable
mag_data1 <- mag_data[,c(-1,-6)]
#remove the col with magazine name and the Market columns
mag_data1$domestic <- domestic
mag_data <- read.csv("MagazineAds.csv")
sum(is.na(mag_data))
str(mag_data)
str(mag_data)
mag_data$domestic <- as.numeric(mag_data$Market==1)
summary(mag_data1)
summary(mag_data1)
summary(mag_data1)
#create a new dummy variable to describe Market variable
mag_data1 <- mag_data[,c(-1,-6)]
summary(mag_data1)
summary(mag_data1)
summary(mag_data)
?read.xls
install.packages("gdata")
library(gdata)
setwd("~/UCLA Boot Camp Projects/Gitbook/resources/R01/data")
read.xls("attendance.xls")
att <- read.xls("attendance.xls")
library(gdata)
att <- read.xls("attendance.xls")
att
?read.xls
library(readxl)
att <- read_xls("attendance.xls", skip=1)
att
head(att)
tail(att)
att <- read_xls("attendance.xls")
head(att)
head(att,n=15)
att[15,"x__13"]
att[15,"X__13"]
att[13,"X__13"]
?is.na
which(is.NA(att))
which(is.na(att))
is.na(att)
complete.cases(att)
library(readxl)
att <- read_xls("attendance.xls")
head(att,n=15)
tail(att,n=15)
?tail
tail(att,n=15, addrownums = TRUE)
tail(att,n=15, addrownums = FALSE)
dim(att)
att[c(58,53,48,43),]
nacount <- is.na(att)
sum(nacount)
?sapply
sapply(att,1,sum)
apply(att, 1, sum)
apply(att, sum)
?apply
apply(as.matrix(att), 1, sum)
apply(nacount, 1, sum)
rowsum(nacount)
?rowsum
rowsum(as.numeric(nacount))
x <- matrix(runif(100), ncol=5)
group <- sample(1:8, 20, T)
xsum <- rowsum(x, group)
x
?runif
group
xsum
?rowsum
c(4:1, 2:5
)
cbind(x1 = 3, x2 = c(4:1, 2:5))
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
rowSums(x)
rowSums(nacount)
removerow<-rowSums(nacount)>5
removerow
att2 <- att[-removerow,]
head(att2)
dim(att2)
att2 <- att[!removerow,]
head(att2)
dim(att2)
removerow<-rowSums(nacount)>5
removecolumn <-seq(3,17,2)
att2 <- att[!removerow,-removecolumn]
head(att2)
# Subset just elementary schools: att_elem
att_elem <- att2[,c(1,6,7)]
# Subset just secondary schools: att_sec
att_sec <- att2[,c(1,8,9)]
# Subset all schools: att4
att4 <- att2[,1:5]
att_elem
# Define cnames vector
cnames <- c("state", "avg_attend_pct", "avg_hr_per_day",
"avg_day_per_yr", "avg_hr_per_yr")
# Assign column names of att4
colnames(att4) <- cnames
head(att4)
cnames[0]
cnames[1]
cnames[1,2]
cnames[c(1,2)]
colnames(att_elem)<- cnames[c(1,2)]
colnames(att_sec)<- cnames[c(1,2)]
colnames(att_sec)<- cnames[c(1,2)]
head(att_sec)
# Remove all periods and white spaces in state column
att4$state <- str_replace_all(att4$state,"\\.","")
library(stringr)
# Remove all periods and white spaces in state column
att4$state <- str_replace_all(att4$state,"\\.","")
att4$state <-str_trim(att4$state)
heaD(att4)
head(att4)
head(att_sec)
att2 <- att[!removerow,-removecolumn]
heaD(att2)
head(att2)
# Remove all periods and white spaces in state column
att2[,1]<- str_replace_all(att2[,1],"\\.","")
att2[,1] <-str_trim(att2[,1])
head(att2)
att2 <- att[!removerow,-removecolumn]
att2[,1].
att2[,1]
# Remove all periods and white spaces in state column
att2[,1]<- str_replace_all(att2[,1],"\\.","")
att2[,1]
att2[1,1]
att2 <- att[!removerow,-removecolumn]
att2[1,1]
att2[1,1]<- str_replace_all(att2[1,1],"\\.","")
att2[1,1]
att2 <- att[!removerow,-removecolumn]
# Remove all periods and white spaces in state column
att2[,1]<- str_replace_all(att2[,1],"\\.","")
att2[1,1]
att2 <- att[!removerow,-removecolumn]
# Remove all periods and white spaces in state column
att2[1]<- str_replace_all(att2[1],"\\.","")
att2[,1] <-str_trim(att2[,1])
att2 <- att[!removerow,-removecolumn]
# Remove all periods and white spaces in state column
att2[1]<- str_replace_all(att2[1],"\\.","")
att2[1] <-str_trim(att2[1])
head(att2)
att2[1,1]
att2 <- att[!removerow,-removecolumn]
# Subset all schools: att4
att4 <- att2[,1:5]
# Assign column names of att4
colnames(att4) <- cnames
head(att4)
# Remove all periods in state column
att4$state <- str_replace_all(att4$state,"\\.","")
# Remove white space around state names
att4$state <-str_trim(att4$state)
head(att4)
# Subset all schools: att4
att4 <- att2[,1:5]
att4[1]<-str_replace_all(att4[$state[1],"\\.","")
att4[1]<-str_replace_all(att4[1],"\\.","")
head(att4)
att4[1]
# Subset all schools: att4
att4 <- att2[,1:5]
att4[1]
shit<-att4[1]
shit<str_replace_all(shit,"\\.","")
shit2<-str_replace_all(shit,"\\.","")
shit
shit2
?str_replace_all
shit3<-att4$state
# Assign column names of att4
colnames(att4) <- cnames
head(att4)
shit4<-att4$state
shit4<-str_replace_all(shit4,"\\.","")
shit4
shit3=shit1
shit3=shit
shit4<-att4$state
shit<-att4[1]
shit1==shit4
shit==shit4
mode(shit)
mode(shit4)
shit5<-att4[,1]
mode(shit5)
shit5<-att4[,c(1,2)]
mode(shit5)
shit5
shit4
shit
shit5<-str_replace_all(shit5," "," blick ")
shit5
?string_replace_all
?str_replace_all
removecolumn <-seq(3,17,2)
att2 <- att[!removerow,-removecolumn]
head(att2)
cnames <- c("state", "avg_attend_pct", "avg_hr_per_day",
"avg_day_per_yr", "avg_hr_per_yr","avg_attend_pct", "avg_hr_per_day")
# Assign column names of att2
colnames(att2) <- cnames
head(att2)
# Remove all periods and white spaces around state names
att2$state <-str_trim(att2$state)
att2$state<-str_replace_all(att2$state,"\\.","")
head(att2)
head(att2$state)
# Remove all periods and white spaces around state names
att2$state<-str_replace_all(att2$state,"\\.","")
att2$state <-str_trim(att2$state)
head(att2$state)
#Make sure you apply names before you run str_replace_all function, because if you call str_replace_all on att2[1], instead of att2$state, things will be messy. att2[1] is a dataframe, while att2$state is a vector.
# Subset just elementary schools: att_elem
att_elem <- att2[,c(1,6,7)]
# Subset just secondary schools: att_sec
att_sec <- att2[,c(1,8,9)]
# Subset all schools: att4
att4 <- att2[,1:5]
att_elem
# Change columns to numeric using dplyr (don't change)
library(dplyr)
?mutate_at
example <- mutate_at(att4, vars(-state), funs(as.numeric))
att4 <- mutate_at(att4, vars(-state), funs(as.numeric))
str(att4)
att <- read_xls("attendance.xls")
head(att,n=15)
tail(att,n=10)
att <- read_xls("attendance.xls")
head(att,n=15)
tail(att,n=10)
#Remove rows with more than 5 NA values
#Remove columns 3,5,7,9,11,13,15,17. They contains useless data
nacount <- is.na(att)
removerow<-rowSums(nacount)>5
removecolumn <-seq(3,17,2)
att2 <- att[!removerow,-removecolumn]
# Define cnames vector
cnames <- c("state", "avg_attend_pct", "avg_hr_per_day",
"avg_day_per_yr", "avg_hr_per_yr","avg_attend_pct", "avg_hr_per_day")
removerow<-rowSums(nacount)>5
removecolumn <-seq(3,17,2)
att2 <- att[!removerow,-removecolumn]
#Remove rows with more than 5 NA values
#Remove columns 3,5,7,9,11,13,15,17. They contains useless data
nacount <- is.na(att)
removerow<-rowSums(nacount)>5
#Remove rows with more than 5 NA values
#Remove columns 3,5,7,9,11,13,15,17. They contains useless data
nacount <- is.na(att)
removerow<-rowSums(nacount)>5
removecolumn <-seq(3,17,2)
att2 <- att[!removerow,-removecolumn]
# Define cnames vector
cnames <- c("state", "avg_attend_pct", "avg_hr_per_day", "avg_day_per_yr", "avg_hr_per_yr","avg_attend_pct", "avg_hr_per_day")
# Assign column names of att2
colnames(att2) <- cnames
head(att2)
#Remove rows with more than 5 NA values
#Remove columns 3,5,7,9,11,13,15,17. They contains useless data
nacount <- is.na(att)
removerow<-rowSums(nacount)>5
removecolumn <-seq(3,17,2)
att2 <- att[!removerow,-removecolumn]
# Define cnames vector
cnames <- c("state", "avg_attend_pct", "avg_hr_per_day", "avg_day_per_yr", "avg_hr_per_yr","avg_attend_pct", "avg_hr_per_day", "avg_attend_pct", "avg_hr_per_day")
# Assign column names of att2
colnames(att2) <- cnames
head(att2)
# Remove all periods and white spaces around state names
att2$state<-str_replace_all(att2$state,"\\.","")
att2$state <-str_trim(att2$state)
head(att2$state)
#Make sure you apply names before you run str_replace_all function, because if you call str_replace_all on att2[1], instead of att2$state, things will be messy. att2[1] is a dataframe, while att2$state is a vector.
# Subset just elementary schools: att_elem
att_elem <- att2[,c(1,6,7)]
att4 <- mutate_at(att4, vars(-state), funs(as.numeric))
str(att4)
